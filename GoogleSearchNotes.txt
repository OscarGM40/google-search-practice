          CREATING A GOOGLE SEARCH ENGINE CLONE

Source: https://www.youtube.com/watch?v=h9zlVmoUV5I&t=120s&ab_channel=React%26NextjsProjectswithSahand
Repo: https://github.com/sahandghavidel/google-clone-nextjs13

Vamos a crear un proyecto next,pero siguiendo las directrices del autor del contenido,usando el directorio app(investigar ventajas):
>npx create-next-app@latest --experimental-app

IMPORTANTE: al usar esta forma la estructura de directorios cambia un poco ya que la api ahora cuelga de src/app/api y no de pages/api.Lo mismo sucede con pages que ahora no está en la raiz sino que cuelga de srs/app/pages.En la version 13 han ido más allá

Favicon de Google: el autor explica como podemos ir a freesvg.org y buscar por el favicon de Google de forma libre(bajar el svg para que escale perfect).Arrastramos al IDE,etc

Minuto 35: ahora si,vamos a instalar Tailwind en nuestro proyecto de Next:
>npm install -D tailwindcss postcss autoprefixer
>npx tailwindcss init -p (esto crea el tailwind.config y el postcss.config)

NOTA: faltaría agregar las rutas para que Tailwind sepa donde escanear.Desde luego no puede ser más sencillo integrar Tailwind a un proyecto en Next.
/** @type {import('tailwindcss').Config} */
module.exports = {
  // fijate que Tailwind necesita las rutas para poder escanear estos directorios e interpretar
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};

Minuto 54: vamos a usar react icons para los iconos(fijate que ésta engloba a hero icons,es la tocha):
>npm install react-icons --save  

NOTA: fijate en como Tailwind tmb tiene clases para targetear en una transition a menos elementos(transition-rule) y en como cambiar el brightness fácilmente:

<button className="bg-blue-500 text-white px-6 py-2 font-medium rounded-md hover:brightness-105 hover:shadow-md transition-shadow duration-300">Sign in</button>

1h 10m: sección central(search bar section).Seguimos estilizando la sección central,es un simple form en flex con dos iconos y el input como hijos.Más abajo dos botones.Fijate en el uso de la pseudo-clase focus-within para mantener el border-shadow

1h 48: para recibir un termino random vamos a usar una API subida a Heroku(por el autor ??) que retorna una simple palabra random en cada GET.La API está aqui:
http://random-word-api.herokuapp.com/home
Y para que devuelva un termino random el endpoint es(https://random-word-api.herokuapp.com/word)

NOTA: fijate que el autor recomienda una web muy buena para generar loadings/spinners

2h10m: creando un layout en Next + Country GeoLocation.
IMPORTANTE: Next provee un componente llamado Layout.tsx que está ya haciendo de layout general para toda la app.Simplemente hay que poner el footer en el layout.Es decir,que no hemos creado nada,solo lo hemos usado.En este punto tengo dudas de porqué Next sabe que es un layout(es por el nombre,por el nombre + la ubicacion?? )Además parece que es por haber usado el --experimental ese.

Fijate como con absolute + bottom 0 se fue todo abajo
Como GEolocation API vamos a usar extreme-ip-lookup.Puedo ver que tiene una tier gratis(aunque solo devuelve el pais del ISP)
NOTA: fijate que tengo que obligar a usar client side rendering en ciertos componentes,como el div con la petición.Esto puede crear un pequeño delay a la hora de pintar el componente(y fijate como por defecto y por lo mismo Next usará server side si puede,ya que renderiza antes).Espectacular

2h50: vamos a crear las rutas /search/image y search/web.En esta aplicación hay que crear las rutas al parecer siempre con el nombre page.tsx y crear directorios por segmento de url(luego tengo que crear app/search/image/page.tsx).Supongo que es en esta forma experimental sólo.
Fijate que en app/api irán los endpoints.

Fijate tmb que podria crear otro layout.tsx en search/image para crear sublayouts.Muy interesante esto.Obviamente el layout que está en app/layout se renderiza en todos.Y para sobrescribir el cmp <Head /> tengo que hacerlo de esta forma,si no sólo veré lo mismo
He aprendido que si tengo que crear algo comun para dos componentes/archivos tengo que crearlo en el componente padre común a ambos

3h: vamos a crear el header para las pages que empiecen por /search
NOTA:fijate como elige transition-all en cuanto tenemos el hover sobre el brightness y sobre un shadow pues queremos animar ambos

TIP: la única diferencia entre display: flex y display: inline-flex es que inline-flex pone al contenedor(y solo al contenedor) en inline.En este punto fijate que un contenedor flex nace en bloque(un <span class="flex> va a coger todo el ancho).Es importantisimo saber que un contenedor flex coge todo el ancho y si quiero que coga menos lo tengo que poner en inline-flex.


Minuto 3h 41: fijate que el hook para acceder a los params desde next13 se llama useSearchParams:

 const params = useSearchParams()

4h25: fetch data from Google Search API and show the titles/links
Ir a developers.google.com y registrarse.Si bajo un poco veré los productos que ofrece Google(Google Cloud,Firebase,Flutter,Google Ads),pero tengo que darle en ver todos y buscar por "Programmable Search Engine"(quer permite construir programáticamente motores de busqueda)

Docu:https://developers.google.com/custom-search/v1/using_rest?hl=en

You can retrieve results for a particular search by sending an HTTP GET request to its URI. You pass in the details of the search request as query parameters. The format for the Custom Search JSON API URI is:

https://www.googleapis.com/customsearch/v1?[parameters]

Three query [parameters] are required with each search request:

API key - Use the key query parameter to identify your application.
Programmable Search Engine ID - Use cx to specify the Programmable Search Engine you want to use to perform this search. The search engine must be created with the Control Panel Note: The Search Engine ID (cx) can be of different format (e.g. 8ac1ab64606d234f1)

Search query - Use the q query parameter to specify your search expression.

All other query parameters are optional.

Here is an example of a request which searches a test Programmable Search Engine for lectures:


GET https://www.googleapis.com/customsearch/v1?key=INSERT_YOUR_API_KEY&cx=017576662512468239146:omuauf_lfve&q=lectures

ASi pues generamos una API key(esta por ahi la opcion).También nos va a hacer falta la cx(parece que es una searchEngine que hay que crear).La creo y me traigo la key

OJO: si creara un proyecto nuevo de Google no le puedo poner el substrign Google como nombre

Cuando tenga todo es simplemente realizar la peticion,pero fijate que Next 13 está introduciendo muchas mejoras(no necesidad de getSSRProps y el hook searchParams pasa solo como arg a una page,ridiculo xd):

type Props = {
  params?: {
    num?: string;
  };
  searchParams: {
    searchTerm?: string;
  };
};

// tmb es muy facil sacar un queryParam desde Next13,simplemente pasando un argumento llamado searchParams
const WebSearchPage = async ({ searchParams }: Props) => {
  const response = await fetch(
    ` https://www.googleapis.com/customsearch/v1?key=${process.env.API_KEY}&cx=${process.env.CONTEXT_KEY}&q=${searchParams.searchTerm}`,
  );
  const data = await response.json();
  //  los results vienen en la propiedad items
  // ojo,un console.log en el server no lo veré en las DevTools y estamos en una page
  // console.log({ results: data.items });
  const results = data.items;

  return <>{results && results.map((result: any, i: number) => <h1 key={i}>{result.title}</h1>)}</>;
};
export default WebSearchPage;
4h48m: handle possible errors.En Next JS(desde la 13 ) puedo crear un file llamado 'error.js' que manejará los errrores en ese file.Dado que queremos manejar los errores tanto para /serch/web como search/image lo pondremos a la altura de search y no de sus hijos.
El autor confirma que es algo exclusivo de Next 13.Y tiene que ser un componente funcional bajo "use client" ya que es la UI a devolver.Esta funcion recogerá automáticamente dos argumentos,el error y una funcion llamada reset para resetear el error:


const Error = ({ error, reset }: { error: string; reset: Function }) => {
  useEffect(() => {
    console.log("Error: ", error);
  }, [error]);

  return (
    <div className="flex flex-col justify-center items-center pt-10">
      <h1 className="text-3xl mb-4">Something went wrong</h1>
      <button className="text-blue-500" onClick={() => reset()}>
        Try again
      </button>
    </div>
  );
};
export default Error;

5h05: creando el componente que muestra las busquedas.Fijate que esta Api devuelve Html.Para poder parsearlo vamos a usar una libreria de terceros para parsear html en react.Se llama html-react-parser, a saber porque.

>npm i html-react-parser

Es muy facil de usar,solo hay que usar su método parse pasandole html:
const parse = require("html-react-parser")
parse('<p>hello</p>)

* Al final cambié el nombre de la export default a HTMLReactParser
 <p className="">{HTMLReactParser(result.htmlSnippet)}</p>

5h40m: para buscar imagenes es exactamente igual,pero añadiendo un queryParam 'searchType' con el valor 'image':

  const response = await fetch(
    ` https://www.googleapis.com/customsearch/v1?key=${process.env.API_KEY}&cx=${process.env.CONTEXT_KEY}&q=${searchParams.searchTerm}&searchType=image`,
  );

  6h10m: paginacion.Sabiendo que la API ya ofrece busquedas paginadas solo hay que llamar a cad peticion con el indice correcto.Para ello vamos a crear una propiedad llamada 'start' en los searchParams:


  const WebSearchPage = async ({ searchParams }: Props) => {
  const startIndex = searchParams.start || "1";
  const response = await fetch(
    ` https://www.googleapis.com/customsearch/v1?key=${process.env.API_KEY}&cx=${process.env.CONTEXT_KEY}&q=${searchParams.searchTerm}&start=${startIndex}`,
  );

Y cada icono será un link con un valor diferente para esa variable.Ese queryParam lo ha montado el back de ellos,por eso puedo acceder con searchParams.get('start'):

"use client";
import Link from "next/link";
import { usePathname, useSearchParams } from "next/navigation";
import { BsChevronLeft, BsChevronRight } from "react-icons/bs";

const PaginationButtons = () => {
  const pathname = usePathname();
  const searchParams = useSearchParams();
  // necesitamos el termino de busqueda
  const searchTerm = searchParams.get("searchTerm");
  // si viene este queryParam lo rescato,si no viene lo inicializo a 1 como Number.Ojo con los parseos
  const startIndex = +(searchParams.get("start") || 1);

  return (
    <div className="text-blue-700 flex px-10 pb-4 justify-between sm:justify-start sm:space-x-44  md:space-x-64 sm:px-0">
      {startIndex >= 10 && (
        // pathname será o /web o /image(el ultimo segmento)
        <Link href={`${pathname}?searchTerm=${searchTerm}&start=${startIndex - 10}`}>
          <div className="flex flex-col cursor-pointer items-center hover:underline">
            <BsChevronLeft className="h-5" />
            <p>Previous</p>
          </div>
        </Link>
      )}
      {startIndex <= 90 && (
        // pathname será o /web o /image(el ultimo segmento)
        <Link href={`${pathname}?searchTerm=${searchTerm}&start=${startIndex + 10}`}>
          <div className="flex flex-col cursor-pointer items-center hover:underline">
            <BsChevronRight className="h-5" />
            <p>Next</p>
          </div>
        </Link>
      )}
    </div>

6h48m